// GPL > 3.0
// Copyright (C) 1996-2014 eIrOcA Enrico Croce & Simona Burzio
// 
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
// 
//  Author :  Enrico Croce
//  Library: Draw Apple 2 shapes, HGR, DHR, GS $C1(PIC) images
//  Version:  1.0.1
//  Creation Date: 01/09/1996    
//  Last Modify Date: 02/04/2014
//
//  NOTE:  Rotation not supported, Scaling and collisions supported
//
enum gMode {
  mdAuto, mdBW, mdColor, mdMixed
}

enum gKind {
  /// MAIN - AUX order
  kdMode1, 
  /// AUX - MAIN order
  kdMode2
}

class Size {

  int OffX;
  int OffY;
  int Width;
  int Height;
  
  public int GetOffsetX() {
    return OffX;
  }

  public int GetOffsetY() {
    return OffY;
  }

  public int GetWidth() {
    return Width;
  }

  public int GetHeight() {
    return Height;
  }

}

class AppleGraphic {

  public const int[] BWCol = {
    0x000000, 0xFFFFFF
  };

   public const int[] DHRCol = {
    0x000000, //0000
    0x800000, //1000
    0x008000, //0100
    0xA00000, //1100
    0x000080, //0010
    0x808080, //1010
    0x00FF00, //0110
    0x80C000, //1110
    0x0000FF, //0001
    0xFF00FF, //1001
    0x808080, //0101
    0xFF0000, //1101
    0x0080FF, //0011
    0xC080FF, //1011
    0x00FFFF, //0111
    0xFFFFFF  //1111
  };
 
  public const int[] HGRCol = {
    0x000000, 0xDD22DD, 0x00DD11, 0xFFFFFF, 0x000000, 0xFF2222, 0x0066FF, 0xFFFFFF
  };

  public const int[] YPos = {
       0, 1024, 2048, 3072, 4096, 5120, 6144, 7168,  128, 1152, 2176, 3200, 4224, 5248, 6272, 7296,
     256, 1280, 2304, 3328, 4352, 5376, 6400, 7424,  384, 1408, 2432, 3456, 4480, 5504, 6528, 7552,
     512, 1536, 2560, 3584, 4608, 5632, 6656, 7680,  640, 1664, 2688, 3712, 4736, 5760, 6784, 7808, 
     768, 1792, 2816, 3840, 4864, 5888, 6912, 7936,  896, 1920, 2944, 3968, 4992, 6016, 7040, 8064,
      40, 1064, 2088, 3112, 4136, 5160, 6184, 7208,  168, 1192, 2216, 3240, 4264, 5288, 6312, 7336,
     296, 1320, 2344, 3368, 4392, 5416, 6440, 7464,  424, 1448, 2472, 3496, 4520, 5544, 6568, 7592,
     552, 1576, 2600, 3624, 4648, 5672, 6696, 7720,  680, 1704, 2728, 3752, 4776, 5800, 6824, 7848,
     808, 1832, 2856, 3880, 4904, 5928, 6952, 7976,  936, 1960, 2984, 4008, 5032, 6056, 7080, 8104,
      80, 1104, 2128, 3152, 4176, 5200, 6224, 7248,  208, 1232, 2256, 3280, 4304, 5328, 6352, 7376,
     336, 1360, 2384, 3408, 4432, 5456, 6480, 7504,  464, 1488, 2512, 3536, 4560, 5584, 6608, 7632,
     592, 1616, 2640, 3664, 4688, 5712, 6736, 7760,  720, 1744, 2768, 3792, 4816, 5840, 6864, 7888,
     848, 1872, 2896, 3920, 4944, 5968, 6992, 8016,  976, 2000, 3024, 4048, 5072, 6096, 7120, 8144
  };
  
  public const byte[] BITS = {1, 2, 4, 8, 16, 32, 64, 128};

  int[] screen;
  int bgColor;
  int fgColor;
  int Width;
  int Height;
  
  public AppleGraphic() {
    bgColor = 0x000000;
    fgColor = 0xFFFFFF;
    SetMode(-1);
  } 
  
  public void SetMode(int mode) {
    switch (mode) {
      case 0:  
        Width  = 280;
        Height = 192;
        break;
      case 1: 
        Width  = 560;
        Height = 192;
        break;
      case 2:
        Width  = 320;
        Height = 200;
        break;
      default:
        Width  = 640;
        Height = 480;
        break;
    }
    Clear();
  }
  
  public int GetPixel(int X, int Y) {
    return screen[Y * Width + X];
  }
  
  public void SetPixel(int X, int Y, int C) {
    screen[Y * Width + X] = C;
  }
  
  public void Clear() {
    if (screen!=null) {
      delete screen;
    }
    int size = Width * Height;
    screen = new int[size];
    for (int i=0; i<size; i++) {
      screen[i] = bgColor;
    }
  }

  public int GetWidth() {
    return Width;
  }

  public int GetHeight() {
    return Height;
  }
  
  public int[] GetScreen() {
    return screen;
  }
  
}

class AppleShape : AppleGraphic {

  const string EXCEPTION_INVALIDSHAPE = "Invalid Shape";
  const string EXCEPTION_INVALIDSHAPETABLE = "Invalid Shape Table";
  const string EXCEPTION_INVALIDIMAGE = "Invalid image format";
  
  byte[] ShTbl;
  int Collisions;
  int Scale;
  int Rot;
  
  public AppleShape() {
    Collisions = 0;
    Scale = 1;
    Rot = 0;
  }

  internal int GetBaseAddr(int Shape) {
    if (ShTbl == null) throw EXCEPTION_INVALIDSHAPETABLE;
    if ((Shape < 1) || (Shape > NumShapes())) throw EXCEPTION_INVALIDSHAPE;
    int offset = Shape << 1;
    return ShTbl[offset] + (ShTbl[offset+1] << 8);
  }

  public void ComputeRect(int Shape, Size rect) {
    int Base = GetBaseAddr(Shape);
    int minX; int X; int maxX; minX = maxX = X = 0;
    int minY; int Y; int maxY; minY = maxY = Y = 0;
    byte Vector;
    byte VByte = ShTbl[Base];
    while (VByte != 0) {
      while (VByte != 0) {
        Vector = VByte & 0x03;
        switch (Vector) {
          case 0: Y--; if (Y < minY) minY = Y; break;
          case 1: X++; if (X > maxX) maxX = X; break;
          case 2: Y++; if (Y > maxY) maxY = Y; break;
          case 3: X--; if (X < minX) minX = X; break;
        }
        VByte >>=  3;
      } 
      VByte = ShTbl[++Base];
    }
    rect.OffX = -minX;
    rect.OffY = -minY;
    rect.Width  = maxX - minX + 1;
    rect.Height = maxY - minY + 1;
  }

  internal void InternalDraw(int Shape, int XPos, int YPos, int mask) {
    int Base = GetBaseAddr(Shape);
    Collisions = 0;
    byte Vector;
    byte VByte = ShTbl[Base];
    while (VByte != 0) {
      while (VByte != 0) {
        Vector = VByte & 0x07;
        for (int i = 0; i < Scale; i++) {
          if (Vector > 3) {
            Vector &= 0x03;
            int c = GetPixel(XPos, YPos);
            if (c != bgColor) Collisions++;
            SetPixel(XPos, YPos, (c & mask) ^ fgColor);
          }
          switch (Vector) {
            case 0: YPos--; break;
            case 1: XPos++; break;
            case 2: YPos++; break;
            case 3: XPos--; break;
          }
        }
        VByte >>=  3;
      } 
      VByte = ShTbl[++Base];
    }
  }

  public void Draw(int Shape, int XPos, int YPos) {
    InternalDraw(Shape, XPos, YPos, 0x00000000);
  }
  
  public void XDraw(int Shape, int XPos, int YPos) {
    InternalDraw(Shape, XPos, YPos, 0x00FFFFFF);
  }

  public void SetShape(byte[] source) {
    ShTbl = source;
  }
  
  public void SetScale(int scale) {
    Scale = scale;
  }
  
  public void SetRotation(int rotation) {
    Rot = rotation;
  }
  
  public int GetCollisions() {
   return Collisions;
  }

  public int NumShapes() {
    return (ShTbl == null) ? 0 : ShTbl[0];
  }

}

class AppleImage : AppleGraphic {

  public void DrawHGRBW(byte[] img) {
    for (int y = 0; y < 192; y++) {
      int tx = 0;
      int base = YPos[y];
      for (int bx = 0; bx < 40; bx++) {
        int vl = img[base++];
        for (int ox = 0; ox < 7; ox++) {
          SetPixel(tx++, y, BWCol[vl & 1]);
          vl >>= 1;
        }
      }
    }
  }

  public void DrawHGRCol(byte[] img, bool solid) {
    for (int y = 0; y < 192; y++) {
      int tx = 0;
      int base = YPos[y];
      do {
        byte v1 = img[base++];
        byte v2 = img[base++];
        byte fl1 = ((v1 & 128) != 0) ? 4 : 0;
        byte fl2 = ((v2 & 128) != 0) ? 4 : 0;
        int v = (v1 & 0x7F) + ((v2 & 0x7F) << 7);
        for (int ox = 0; ox < 7; ox++) {
          byte c = v & 0x03;
          v = v >> 2;
          int oc1;
          int oc2; 
          if (ox < 3) {
            oc1 = oc2 = c + fl1;
          }
          else if (ox > 3) {
            oc1 = oc2 = c + fl2;
          }
          else {
            oc1 = c + fl1;
            oc2 = c + fl2;
          }
          oc1 = (solid || ((c & 1) != 0)) ? HGRCol[oc1] : 0;
          oc2 = (solid || ((c & 2) != 0)) ? HGRCol[oc2] : 0;
          SetPixel(tx++, y, oc1);
          SetPixel(tx++, y, oc2);
        }
      }
      while (tx < 280);
    }
  }

  internal gMode DecodeMode(byte type) {
    gMode mode; 
      switch (type) {
        case 0:
        case 4:
          mode = gMode.mdBW; 
          break;
        case 1:
        case 5:
          mode = gMode.mdMixed;
          break;
        case 2:
        case 6: 
          // 560x192
          mode = gMode.mdBW;
          break;
        case 3:
        case 7:
          mode = gMode.mdColor;
          break;
        default:
          mode = gMode.mdMixed;
          break;
      }
      return mode;
  }
      
  public void DrawHGR(byte[] img, gMode mode) {
    // if (img.Length < 8184) throw EXCEPTION_INVALIDIMAGE;
    SetMode(0);
    if (mode == gMode.mdAuto) {
      mode = DecodeMode(img[120]);
    }
    switch (mode) {
      case gMode.mdBW: DrawHGRBW(img); break;
      case gMode.mdColor: DrawHGRCol(img, true); break;
      case gMode.mdMixed: DrawHGRCol(img, false); break;
    }
  }
  
  public void DrawDHRBW(byte[] img, bool mainFirst) {
    int off1 = mainFirst ? 0 : 8192;
    int off2 = mainFirst ? 8192 : 0;
    for (int y = 0; y < 192; y++) {
      int tx = 0;
      int base1 = YPos[y] + off1;
      int base2 = YPos[y] + off2;
      for (int bx = 0; bx < 40; bx++) {
        byte vl1 = img[base1++] & 0x7F;
        byte vl2 = img[base2++] & 0x7F;
        int v = (vl2 << 7) + vl1;
        for (int ox = 0; ox < 14; ox++) {
          int c = BWCol[v & 1];
          SetPixel(tx, y, c);
          v >>=  1;
          tx++;
        }
      }
    }
  }
  
  public void DrawDHRCol(byte[] img, bool mainFirst, bool solid) {
   int off1 = mainFirst ? 0 : 8192;
   int off2 = mainFirst ? 8192 : 0;
   for (int y = 0; y < 192; y++) {
      int tx = 0;
      int base1 = YPos[y] + off1;
      int base2 = YPos[y] + off2;
      for (int bx = 0; bx < 20; bx++) {
        byte vl1 = img[base1++] & 0x7F;
        byte vl2 = img[base2++] & 0x7F;
        byte vl3 = img[base1++] & 0x7F;
        byte vl4 = img[base2++] & 0x7F;
        int v = (vl4 << 21) + (vl3 << 14) + (vl2 << 7) + vl1;
        for (int ox = 0; ox < 7; ox++) {
          byte nibble = v & 0x0F;
          int c = DHRCol[nibble];
          for (int i = 0; i < 4; i++) {
            if (solid || ((nibble & BITS[i]) != 0)) {
              SetPixel(tx, y, c);
            }
            tx++;
          }
          v >>= 4;
        }
      }
    }
  }
    
  public void DrawDHR(byte[] img, gKind kind, gMode mode) {
    // if (img.Length != 16384) throw EXCEPTION_INVALIDIMAGE;
    SetMode(1);
    if (mode == gMode.mdAuto) {
      mode = DecodeMode(img[120]);
    }
    bool mainFirst = (kind==gKind.kdMode1);
    switch (mode) {
      case gMode.mdBW: DrawDHRBW(img, mainFirst); break;
      case gMode.mdColor: DrawDHRCol(img, mainFirst, true); break;
      case gMode.mdMixed: DrawDHRCol(img, mainFirst, false); break;
    }
  }
  
  public const int PALETTE_OFFSET = 32256;
  
  internal void DecodePal(byte[] Pic, int[] Pal) {
    int off = 0;
    int base = PALETTE_OFFSET;
    for (int j = 0; j<16; j++) {
      for (int i = 0; i<16; i++) {
        byte tmp1 = Pic[base++];
        byte tmp2 = Pic[base++];
        int bb = (tmp1 & 0x0F);
        int gg = (tmp1 & 0xF0) >> 4;
        int rr = (tmp2 & 0x0F);
        Pal[off++] = ((bb*17) << 16) + ((gg*17) << 8) + (rr*17);
      }
    }
  }
  
  public const int SLCB_OFFSET = 32000;
  
  internal byte GetColor(byte[] Pic, int x, int y) {
    byte tmp = Pic[(y*160) + (x>>1)];
    if ((x & 1) != 0) {
      return (Pic[SLCB_OFFSET+y] << 4) + (tmp & 0x0F);
    }
    else {
      return (Pic[SLCB_OFFSET+y] << 4) + (tmp >> 4);
    }
  }  
  
  public void DrawSHR(byte[] img) {
    SetMode(2);
    int[256] Pal;
    DecodePal(img, Pal);
    for (int y = 0; y < 200; y++) {
      for (int x = 0; x < 320; x++) {
        int c = Pal[GetColor(img, x, y)];
        SetPixel(x, y, c);
      }
    }
  }

}

class Sprite {

  int w;
  int h;
  int x;
  int y;
  byte[] data;

  public int GetWidth() {
    return w;
  }
  
  public int GetHeight() {
    return h;
  }

  public int GetX() {
    return x;
  }
  
  public int GetY() {
    return y;
  }
  
  public byte[] GetData() {
  	return data;
  }
  
  public void Define(int width, int height, byte[] def) {
    w = width;
    h = height;
    data = def;
  }
  
  public void SetPosition(int px, int py) {
    x = px;
    y = py;
  }
  
}

class AppleSprite : AppleGraphic {

  const string EXCEPTION_INVALIDSPRITE = "Invalid Sprite";

  int NumSprites;
  Sprite[] Sprites;

  public AppleSprite() {
    NumSprites = 0;
    Sprites = new Sprite[NumSprites];
  }
  
  public int GetNumSprites() {
    return NumSprites;
  }

  public void DeleteSprites() {
    for (int i=0; i<NumSprites; i++) {
      delete Sprites[i];
    }
    Sprites = null;
    NumSprites = 0;
  }
  
  public Sprite GetSprite(int i) {
    if ((i<0) || (i>=NumSprites)) throw EXCEPTION_INVALIDSPRITE;
  	return Sprites[i];
  }
  
  public void AddSprite(Sprite sprite) {
    Sprite[] NewSprites = new Sprite[NumSprites+1];
    for (int i=0; i < NumSprites; i++) {
      NewSprites[i] = Sprites[i];
    }
    NewSprites[NumSprites] = sprite;
    NumSprites++;
    delete Sprites;
    Sprites = NewSprites;    
  }
  
  public void DrawSprites() {
    for (int i = 0; i<NumSprites; i++) {
      DrawSprite(Sprites[i]);
    }
  }
     
  public void DrawSprite(Sprite s) {
    int pos = 0;
    if ((s.x + s.w * 8) >= Width ) return;
    if ((s.y + s.h    ) >= Height) return;
    int px = s.x;
    int py;
    for (int w = 0; w < s.w; w++) {
      py = s.y;
      for (int h = 0; h < s.h; h++) {
        byte value = s.data[pos++];
        for (int k = 0; k < 8; k++) {
          int c = ((value & BITS[7-k]) != 0) ? fgColor : bgColor;
          SetPixel(px+k, py, c);
        }
        py++;
      }
      px += 8;
    }
  }
 
  public void ResetPos(int sx, int sy, int MaxX) {
    int px = 0;
    int py = 0;
    int my = 0;
    for (int i = 0; i<NumSprites; i++) {
      Sprite s = Sprites[i];
      int wx = s.w * 8;
      int wy = s.h;
      if ((px+wx) >= MaxX) {
        px = 0;
        py += my + sy;
        my = 0;
      }
      s.x = px;
      s.y = py;
      px += wx + sx;
      if (wy>my) {
        my = wy;
      }
    }
  }
     
}